@page "/reports/drivers"
@inherits PageBase

<RadzenHeading Size="HeadingSize.H4" Text="Drivers Report" />

<RadzenCard>
    <RadzenRow>
        <RadzenColumn Size="3">
            <RadzenDatePicker @bind-Value="query.From" Placeholder="From" />
        </RadzenColumn>
        <RadzenColumn Size="3">
            <RadzenDatePicker @bind-Value="query.To" Placeholder="To" />
        </RadzenColumn>
        <RadzenColumn Size="3">
            <RadzenTextBox @bind-Value="query.Search" Placeholder="Search" />
        </RadzenColumn>
        <RadzenColumn Size="3" class="d-flex align-items-end">
            <RadzenButton Text="Filter" Click="LoadData" Icon="search" Style="margin-right: 0.5rem" />
            <RadzenButton Text="Reset" Click="Reset" Icon="restart_alt" ButtonStyle="ButtonStyle.Secondary" />
        </RadzenColumn>
    </RadzenRow>

    <RadzenDataGrid Data="items" TItem="DriversReportItemDto" Count="totalCount" LoadData="OnLoadGrid" AllowPaging="true" PageSize="query.PageSize">
        <Columns>
            <RadzenDataGridColumn TItem="DriversReportItemDto" Property="DriverName" Title="Driver" />
            <RadzenDataGridColumn TItem="DriversReportItemDto" Property="LoadsDelivered" Title="Loads Delivered" />
            <RadzenDataGridColumn TItem="DriversReportItemDto" Property="DistanceDriven" Title="Distance (km)" />
            <RadzenDataGridColumn TItem="DriversReportItemDto" Property="GrossEarnings" Title="Gross" />
        </Columns>
    </RadzenDataGrid>

    <RadzenRow class="mt-3">
        <RadzenColumn Size="4"><b>Total Gross:</b> @totalGross</RadzenColumn>
        <RadzenColumn Size="4"><b>Total Distance:</b> @totalDistance</RadzenColumn>
        <RadzenColumn Size="4"><b>Total Count:</b> @totalCount</RadzenColumn>
    </RadzenRow>
</RadzenCard>

@code {
    private DriversReportQuery query = new() { Page = 1, PageSize = 10 };
    private IEnumerable<DriversReportItemDto> items = Array.Empty<DriversReportItemDto>();
    private int totalCount;
    private decimal totalGross;
    private double totalDistance;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task OnLoadGrid(LoadDataArgs args)
    {
        query.Page = (args.Skip / args.Top) + 1;
        query.PageSize = args.Top ?? query.PageSize;
        await LoadData();
    }

    private async Task LoadData()
    {
        var res = await ApiClient.GetDriversReportAsync(query);
        if (res.Success)
        {
            items = res.Data!.Items;
            totalCount = res.Data.TotalCount;
            totalGross = res.Data.TotalGross;
            totalDistance = res.Data.TotalDistance;
        }
    }

    private async Task Reset()
    {
        query = new DriversReportQuery { Page = 1, PageSize = 10 };
        await LoadData();
    }
}

